import glob
import logging
import os
import sys
from concurrent import futures
from datetime import datetime
from pathlib import Path
from shutil import copyfile
from time import sleep

import pandas as pd
import yahoo_fin.stock_info as si
import yfinance as yf
from git import Repo
from pandas_datareader import data as pdr
from pandas_datareader._utils import RemoteDataError

PATH_OF_GIT_REPO = r'./data'  # make sure .git folder is properly configured
COMMIT_MESSAGE = 'Generated by StockScreener on ' + str(datetime.now())

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger(__name__)

all_files = glob.glob(os.path.join('.', "*.csv"))

for f in all_files:
    os.remove(f)
yf.pdr_override()
# Generate by YahooTickerDownloader.py at home dir https://github.com/Benny-/Yahoo-ticker-symbol-downloader
logger.info('Load tickers')
df = pd.read_csv(str(Path.home()) + "/generic.csv", usecols=["symbol"])
tickers = df['symbol'].values
tickers.sort()
# Don't duplicate
tickers = dict.fromkeys(tickers)
# Index for graham; Europe triple AAA bonds changing
aaaEUBondIndex = pd.read_csv(
    'https://sdw.ecb.europa.eu/quickviewexport.do?SERIES_KEY=165.YC.B.U2.EUR.4F.G_N_A.SV_C_YM.SR_1Y&type=xls',
    header=4, nrows=1)
aaaEUBondIndex = aaaEUBondIndex['[Percent per annum ]'].iloc[0]
logger.info('Tickers Loaded')

all_files = glob.glob(os.path.join('./data', "*.skip"))
try:
    for f in all_files:
        skippedTicker = f.split('/')[2].replace('.skip', '')
        tickers.pop(skippedTicker)
        logger.info(skippedTicker + " skipped")
except KeyError as e:
    logger.warning(e)

# Default params
paramMargin = 4
paramRoe = 4
paramPayout = 100
paramDividend = 3
urlAccess = True
sleeps = 5
trys = 5


def rank_tickers(ticker):
    global urlAccess
    filename = './data/%s.skip' % ticker
    if os.path.exists(filename):
        logger.info(ticker + " skipped")
        return
    if not urlAccess:
        urlAccess = True
        raise ValueError("No data found, can't access URL")
    try:
        df = pdr.get_quote_yahoo(ticker)
        df = df.reindex(
            columns=['epsForward', 'epsCurrentYear', 'twoHundredDayAverageChangePercent', 'epsTrailingTwelveMonths',
                     'regularMarketPrice', 'twoHundredDayAverage', 'price'])
        df.index.names = ['ticker']
        df.reset_index()
        # Apply graham and rules
        df['scoreEps'] = (df['epsForward'][ticker] / df['price'][ticker]) - \
                         (df['epsTrailingTwelveMonths'][ticker] / df['twoHundredDayAverage'][ticker])
        df['scoreEpsMatch'] = df['scoreEps'][ticker] > 0
        df['graham'] = abs(
            (df['epsCurrentYear'][ticker] * (
                    7 + df['twoHundredDayAverageChangePercent'][ticker] * 4.4) / aaaEUBondIndex))
        df['scoreGrahamMatch'] = df['graham'][ticker] > df['price'][ticker]
        stats = si.get_stats(ticker)['Value']
        df['margin'] = float(str(stats.iloc[32]).replace('%', '').replace(',', ''))
        df['scoreMarginMatch'] = df['margin'][ticker] > paramMargin
        df['roe'] = float(str(stats.iloc[34]).replace('%', '').replace(',', ''))
        df['scoreRoeMatch'] = df['roe'][ticker] > paramRoe
        df['payout'] = float(str(stats.iloc[24]).replace('%', '').replace(',', ''))
        df['scorePayoutMatch'] = df['payout'][ticker] < paramPayout
        df['dividendYield'] = float(str(stats.iloc[22]).replace('%', '').replace(',', ''))
        df['scoreDividendYieldMatch'] = df['dividendYield'][ticker] < 15 and df['dividendYield'][ticker] > paramDividend
        info = yf.Ticker(ticker).info
        df['sector'] = info['sector']
        df['industry'] = info['industry']
        df['longBusinessSummary'] = info['longBusinessSummary']
        current_score = sum([df['scoreEpsMatch'], df['scoreGrahamMatch'], df['scoreMarginMatch'],
                             df['scoreRoeMatch'], df['scorePayoutMatch'], df['scoreDividendYieldMatch']])
        # End Apply graham and rules
        conditional = df['scoreDividendYieldMatch'][ticker] and current_score[ticker] >= 5
        if conditional:
            current_score += (df['dividendYield'][ticker] * 100) + (df['scoreEps'][ticker] * 100)
            df['score'] = int(current_score)
            df.to_csv(f'{ticker}.csv')
            logger.info(f'{ticker} - exported')
        else:
            logger.info(f'{ticker} - ignored')

    except (IndexError, KeyError, ValueError) as e:
        logger.info(f'{ticker} - no data found')
        option = 'w'
        if os.path.exists(filename):
            option = 'a'
        with open(filename, option) as file:
            file.write(e)
            file.write("\n")

    except RemoteDataError:
        global sleeps
        global trys
        if trys != 0 and trys <= 5:
            sleeps = sleeps * 2
            logger.info("Sleep for %s retrieving count %s of 5" % (sleeps, trys))
            sleep(sleeps)
            logger.info(ticker + ' - connection error')
            rank_tickers(ticker)
        else:
            urlAccess = False
            rank_tickers(ticker)
            trys = 5
            sleeps = 25
    except Exception as e:
        raise e


# Parallel process
executor = futures.ProcessPoolExecutor(len(os.sched_getaffinity(0)) * 2)
tasks = [executor.submit(rank_tickers, ticker) for ticker in tickers]
futures.wait(tasks)

all_files = glob.glob(os.path.join('.', "*.csv"))
df_from_each_file = (pd.read_csv(f, sep=',') for f in all_files)
df_merged = pd.concat(df_from_each_file, ignore_index=True)
df_merged.to_csv('stocksScreened.csv')

all_files = glob.glob(os.path.join('.', "*.csv"))

for f in all_files:
    if not str(f).endswith('stocksScreened.csv'):
        os.remove(f)

copyfile("stocksScreened.csv", "./data/stocksScreened.csv")
try:
    copyfile("stocksScreened.csv", str(Path.home()) + "/GDrive/FinanÃ§as/StockScreener/stocksScreened.csv")
except Exception:
    logger.info("Drive not available")
# Update module
repo = Repo(PATH_OF_GIT_REPO)
repo.git.add(update=True)
repo.index.commit(COMMIT_MESSAGE)
origin = repo.remote(name='origin')
origin.push()
# Update project
repo = Repo('.')
repo.git.add(update=True)
repo.index.commit(COMMIT_MESSAGE)
origin = repo.remote(name='origin')
origin.push()
